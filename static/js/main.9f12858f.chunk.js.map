{"version":3,"sources":["ApiService/ApiService.js","components/IconButton/IconButton.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/SearchForm/SearchForm.js","components/SearchBar/SearchBar.js","components/Loader/Loader.js","components/Modal/Modal.js","App.js","index.js"],"names":["fetchImages","searchQuery","currentPage","a","axios","get","data","IconButton","children","onClick","allyProps","type","className","defaultProps","ImageGalleryItem","image","onImageClick","src","webformatURL","alt","tags","largeImageURL","width","height","ImageGallery","images","map","id","Button","SearchForm","onSearch","useState","query","setQuery","resetForm","onSubmit","e","preventDefault","trim","fill","name","value","onChange","currentTarget","autoComplete","autoFocus","Searchbar","LoaderApp","color","timeout","modalRoot","document","querySelector","Modal","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","target","App","setSearchQuery","setImages","setCurrentPage","showModal","setShowModal","setError","isLoading","setIsLoading","largeImage","setLargeImage","total","setTotal","getImages","then","hits","prev","scrollOnLoadButton","catch","error","finally","toggleModal","scrollTo","top","documentElement","offsetHeight","behavior","block","Math","ceil","Loader","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f12858f.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst fetchImages = async (searchQuery, currentPage) => {\r\n  const { data } = await axios.get(\r\n    `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=21904508-8c5f9bb97b16d01f890abadf2&image_type=photo&orientation=horizontal&per_page=12`,\r\n  );\r\n\r\n  return data;\r\n};\r\n\r\nexport default fetchImages;\r\n","import PropTypes from 'prop-types';\r\nimport './IconButton.css';\r\nconst IconButton = ({ children, onClick, ...allyProps }) => (\r\n  <button type=\"button\" className=\"iconButton\" onClick={onClick} {...allyProps}>\r\n    {children}\r\n  </button>\r\n);\r\n\r\nIconButton.defaultProps = {\r\n  onClick: () => null,\r\n  children: null,\r\n};\r\n\r\nIconButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.node,\r\n  'aria-label': PropTypes.string.isRequired,\r\n};\r\n\r\nexport default IconButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageGalleryItem.css';\r\n\r\nconst ImageGalleryItem = ({ image, onImageClick }) => {\r\n  const fullImage = () => onImageClick(image.largeImageURL);\r\n\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img src={image.webformatURL} alt={image.tags} onClick={fullImage} width=\"250\" height=\"150\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nImageGalleryItem.defaultProps = {\r\n  tags: '',\r\n};\r\n\r\nImageGalleryItem.propTypes = {\r\n  image: PropTypes.shape({\r\n    webformatURL: PropTypes.string.isRequired,\r\n    largeImageURL: PropTypes.string.isRequired,\r\n    tags: PropTypes.string,\r\n  }),\r\n  onImageClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\n//import styles from './ImageGallery.module.scss';\r\nimport './ImageGallery.css';\r\nconst ImageGallery = ({ images, onImageClick }) => {\r\n  return (\r\n    <ul className=\"gallery list\">\r\n      {images.map(image => (\r\n        <ImageGalleryItem key={image.id} image={image} onImageClick={onImageClick} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n    }),\r\n  ),\r\n  onImageClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import styles from './Button.module.scss';\r\nimport './Button.css';\r\nconst Button = ({ onClick }) => (\r\n  <div>\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  </div>\r\n);\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchForm.css';\r\nimport { ImSearch } from 'react-icons/im';\r\nconst SearchForm = ({ onSearch }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleSearchInput = e => {\r\n    const { value } = e.currentTarget;\r\n\r\n    setQuery(value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!query.trim()) return;\r\n\r\n    onSearch(query);\r\n\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => setQuery('');\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"SearchForm\">\r\n      <button type=\"submit\" className=\"buttonForm\">\r\n        <ImSearch width=\"20px\" height=\"20px\" fill=\"#7e7b7b\" />\r\n      </button>\r\n\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        name=\"query\"\r\n        value={query}\r\n        onChange={handleSearchInput}\r\n        autoComplete=\"off\"\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nSearchForm.propTypes = {\r\n  onSearch: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\n\r\n//import PropTypes from 'prop-types';\r\nimport SearchForm from '../SearchForm/SearchForm';\r\nimport './SearchBar.css';\r\n//import styles from './Searchbar.module.scss';\r\n\r\nconst Searchbar = ({ onSubmit }) => (\r\n  <header className=\"SearchBar\">\r\n    <SearchForm onSearch={onSubmit} />\r\n  </header>\r\n);\r\n\r\n//Searchbar.propTypes = {\r\n//onSearch: PropTypes.func.isRequired,\r\n//};\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nconst LoaderApp = () => (\r\n  <div>\r\n    <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} timeout={3000} />\r\n  </div>\r\n);\r\n\r\nexport default LoaderApp;\r\n","import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nconst Modal = ({ children, onClose }) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  });\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal\">{children}</div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n};\r\n\r\nModal.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport 'modern-normalize/modern-normalize.css';\nimport { ImCross } from 'react-icons/im';\nimport fetchImages from './ApiService/ApiService';\nimport IconButton from './components/IconButton/IconButton';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport Button from './components/Button/Button';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport LoaderApp from './components/Loader/Loader';\nimport Modal from './components/Modal/Modal';\n\nconst App = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showModal, setShowModal] = useState(false);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [largeImage, setLargeImage] = useState({});\n  const [total, setTotal] = useState(0);\n  useEffect(() => {\n    if (searchQuery) {\n      getImages();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery]);\n\n  const getImages = () => {\n    setIsLoading(true);\n\n    fetchImages(searchQuery, currentPage)\n      .then(({ hits, total }) => {\n        setImages(prev => [...prev, ...hits]);\n        setCurrentPage(prev => prev + 1);\n        setTotal(total);\n\n        scrollOnLoadButton();\n      })\n      .catch(error => setError(error))\n\n      .finally(() => setIsLoading(false));\n  };\n\n  const onChangeQuery = query => {\n    if (query === searchQuery) {\n      return;\n    }\n\n    setSearchQuery(query);\n    setImages([]);\n    setCurrentPage(1);\n  };\n\n  const toggleModal = () => {\n    setShowModal(prev => !prev);\n  };\n\n  const handleGalleryItem = largeImage => {\n    setLargeImage(largeImage);\n    toggleModal();\n  };\n\n  const scrollOnLoadButton = () => {\n    window.scrollTo({\n      top: document.documentElement.offsetHeight,\n      behavior: 'smooth',\n      block: 'end',\n    });\n  };\n  const needToShowLoadMore = () => {\n    return Math.ceil(total / 12) !== currentPage - 1;\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={onChangeQuery} />\n      <ImageGallery images={images} onImageClick={handleGalleryItem} />\n      {needToShowLoadMore && <Button onClick={getImages} />}\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <div className=\"Close-box\">\n            <IconButton onClick={toggleModal} aria-label=\"Close modal\">\n              <ImCross width=\"20px\" height=\"20px\" fill=\"#7e7b7b\" />\n            </IconButton>\n          </div>\n          <img src={largeImage} alt=\"\" className=\"Modal-image\" />\n        </Modal>\n      )}\n      {isLoading && <LoaderApp />}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}